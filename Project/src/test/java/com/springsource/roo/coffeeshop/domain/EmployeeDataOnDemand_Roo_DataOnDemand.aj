// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.coffeeshop.domain;

import com.springsource.roo.coffeeshop.domain.Employee;
import com.springsource.roo.coffeeshop.domain.EmployeeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EmployeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeDataOnDemand: @Component;
    
    private Random EmployeeDataOnDemand.rnd = new SecureRandom();
    
    private List<Employee> EmployeeDataOnDemand.data;
    
    public Employee EmployeeDataOnDemand.getNewTransientEmployee(int index) {
        Employee obj = new Employee();
        setEmployeeFirstName(obj, index);
        setEmployeeID(obj, index);
        setEmployeeLastName(obj, index);
        setEmployeePhoneNumber(obj, index);
        setEmployeeSalary(obj, index);
        return obj;
    }
    
    public void EmployeeDataOnDemand.setEmployeeFirstName(Employee obj, int index) {
        String EmployeeFirstName = "EmployeeFirstName_" + index;
        obj.setEmployeeFirstName(EmployeeFirstName);
    }
    
    public void EmployeeDataOnDemand.setEmployeeID(Employee obj, int index) {
        String EmployeeID = "EmployeeID_" + index;
        obj.setEmployeeID(EmployeeID);
    }
    
    public void EmployeeDataOnDemand.setEmployeeLastName(Employee obj, int index) {
        String EmployeeLastName = "EmployeeLastName_" + index;
        obj.setEmployeeLastName(EmployeeLastName);
    }
    
    public void EmployeeDataOnDemand.setEmployeePhoneNumber(Employee obj, int index) {
        String EmployeePhoneNumber = "EmployeePhoneNumber_" + index;
        obj.setEmployeePhoneNumber(EmployeePhoneNumber);
    }
    
    public void EmployeeDataOnDemand.setEmployeeSalary(Employee obj, int index) {
        Integer EmployeeSalary = new Integer(index);
        obj.setEmployeeSalary(EmployeeSalary);
    }
    
    public Employee EmployeeDataOnDemand.getSpecificEmployee(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Employee obj = data.get(index);
        Long id = obj.getId();
        return Employee.findEmployee(id);
    }
    
    public Employee EmployeeDataOnDemand.getRandomEmployee() {
        init();
        Employee obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Employee.findEmployee(id);
    }
    
    public boolean EmployeeDataOnDemand.modifyEmployee(Employee obj) {
        return false;
    }
    
    public void EmployeeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Employee.findEmployeeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Employee' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Employee>();
        for (int i = 0; i < 10; i++) {
            Employee obj = getNewTransientEmployee(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
