// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.coffeeshop.domain;

import com.springsource.roo.coffeeshop.domain.ManagerDataOnDemand;
import com.springsource.roo.coffeeshop.domain.Menu;
import com.springsource.roo.coffeeshop.domain.MenuDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MenuDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MenuDataOnDemand: @Component;
    
    private Random MenuDataOnDemand.rnd = new SecureRandom();
    
    private List<Menu> MenuDataOnDemand.data;
    
    @Autowired
    ManagerDataOnDemand MenuDataOnDemand.managerDataOnDemand;
    
    public Menu MenuDataOnDemand.getNewTransientMenu(int index) {
        Menu obj = new Menu();
        setDrinkID(obj, index);
        setDrinkName(obj, index);
        setPrice(obj, index);
        setSizes(obj, index);
        return obj;
    }
    
    public void MenuDataOnDemand.setDrinkID(Menu obj, int index) {
        String DrinkID = "DrinkID_" + index;
        obj.setDrinkID(DrinkID);
    }
    
    public void MenuDataOnDemand.setDrinkName(Menu obj, int index) {
        String DrinkName = "DrinkName_" + index;
        obj.setDrinkName(DrinkName);
    }
    
    public void MenuDataOnDemand.setPrice(Menu obj, int index) {
        Float Price = new Integer(index).floatValue();
        obj.setPrice(Price);
    }
    
    public void MenuDataOnDemand.setSizes(Menu obj, int index) {
        String Sizes = "Sizes_" + index;
        obj.setSizes(Sizes);
    }
    
    public Menu MenuDataOnDemand.getSpecificMenu(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Menu obj = data.get(index);
        Long id = obj.getId();
        return Menu.findMenu(id);
    }
    
    public Menu MenuDataOnDemand.getRandomMenu() {
        init();
        Menu obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Menu.findMenu(id);
    }
    
    public boolean MenuDataOnDemand.modifyMenu(Menu obj) {
        return false;
    }
    
    public void MenuDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Menu.findMenuEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Menu' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Menu>();
        for (int i = 0; i < 10; i++) {
            Menu obj = getNewTransientMenu(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
